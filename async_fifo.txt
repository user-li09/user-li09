// 写时钟域信号定义
	reg [PTR:0] wr_bin		;					// 二进制写地址
	reg [PTR:0] wr_gray		;					// 格雷码写地址
	reg [PTR:0] rd_gray_ff1 ;					// 格雷码读地址同步寄存器1
	reg [PTR:0] rd_gray_ff2 ;					// 格雷码读地址同步寄存器2
	reg [PTR:0] rd_bin_wr	;					// 同步到写时钟域的二进制读地址
 
 
	// 读时钟域信号定义
	reg [PTR:0] rd_bin		;					// 二进制读地址
	reg [PTR:0] rd_gray		;					// 格雷码读地址
	reg [PTR:0] wr_gray_ff1 ;					// 格雷码写地址同步寄存器1
	reg [PTR:0] wr_gray_ff2 ;					// 格雷码写地址同步寄存器2
	reg [PTR:0] wr_bin_rd	;					// 同步到读时钟域的二进制写地址
 
 
	// 解格雷码电路循环变量
	integer i ;
	integer j ;
 
 
	// DPRAM控制信号
	wire  				dpram_wr_en		 ;		// DPRAM写使能
	wire [PTR-1:0]		dpram_wr_addr    ;		// DPRAM写地址
	wire [WIDTH-1:0] 	dpram_wr_data	 ;		// DPRAM写数据
	wire  				dpram_rd_en		 ;		// DPRAM读使能
	wire [PTR-1:0]		dpram_rd_addr    ;		// DPRAM读地址
	wire [WIDTH-1:0] 	dpram_rd_data	 ;		// DPRAM读数据
 
 
 
	// ******************************** 写时钟域 ******************************** //
	// 二进制写地址递增
	always @(posedge wrclk or posedge wr_rst_n) begin
		if (!wr_rst_n) begin
			wr_bin <= 'b0;
		end
		else if ( wr_en == 1'b1 && wr_full == 1'b0 ) begin
			wr_bin <= wr_bin + 1'b1;
		end
		else begin
			wr_bin <= wr_bin;
		end
	end
 
 
	// 写地址：二进制转格雷码
	always @(posedge wrclk or posedge wr_rst_n) begin
		if (!wr_rst_n) begin
			wr_gray <= 'b0;
		end
		else begin
			wr_gray <= { wr_bin[PTR], wr_bin[PTR:1] ^ wr_bin[PTR-1:0] };
		end
	end
	// 格雷码读地址同步至写时钟域
	always @(posedge wrclk or posedge wr_rst_n) begin
		if(!wr_rst_n) begin
			rd_gray_ff1 <= 'b0;
			rd_gray_ff2 <= 'b0;
		end
		else begin
			rd_gray_ff1 <= rd_gray;
			rd_gray_ff2 <= rd_gray_ff1;
		end
	end
	// 同步后的读地址解格雷
	always @(*) begin
		rd_bin_wr[PTR] = rd_gray_ff2[PTR];
		for ( i=PTR-1; i>=0; i=i-1 )
			rd_bin_wr[i] = rd_bin_wr[i+1] ^ rd_gray_ff2[i];
	end
	// 写时钟域产生写满标志
	always @(*) begin
		if( (wr_bin[PTR] != rd_bin_wr[PTR]) && (wr_bin[PTR-1:0] == rd_bin_wr[PTR-1:0]) ) begin
			wr_full = 1'b1;
		end
		else begin
			wr_full = 1'b0;
		end
	end
	// ******************************** 读时钟域 ******************************** //
	always @(posedge rdclk or posedge rd_rst_n) begin
		if (!rd_rst_n) begin
			rd_bin <= 'b0;
		end
		else if ( rd_en == 1'b1 && rd_empty == 1'b0 ) begin
			rd_bin <= rd_bin + 1'b1;
		end
		else begin
			rd_bin <= rd_bin;
		end
	end
	// 读地址：二进制转格雷码
	always @(posedge rdclk or posedge rd_rst_n) begin
		if (!rd_rst_n) begin
			rd_gray <= 'b0;
		end
		else begin
			rd_gray <= { rd_bin[PTR], rd_bin[PTR:1] ^ rd_bin[PTR-1:0] };
		end
	end
 
 
	// 格雷码写地址同步至读时钟域
	always @(posedge rdclk or posedge rd_rst_n) begin
		if(!rd_rst_n) begin
			wr_gray_ff1 <= 'b0;
			wr_gray_ff2 <= 'b0;
		end
		else begin
			wr_gray_ff1 <= wr_gray;
			wr_gray_ff2 <= wr_gray_ff1;
		end
	end
 
 
	// 同步后的写地址解格雷
	always @(*) begin
		wr_bin_rd[PTR] = wr_gray_ff2[PTR];
		for ( j=PTR-1; j>=0; j=j-1 )
			wr_bin_rd[j] = wr_bin_rd[j+1] ^ wr_gray_ff2[j];
	end
 
 
	// 读时钟域产生读空标志
	always @(*) begin
		if( wr_bin_rd == rd_bin )
			rd_empty = 1'b1;
		else
			rd_empty = 1'b0;
	end
 
 
	// RTL双口RAM例化
	DPRAM
		# ( .WIDTH(16), .DEPTH(16), .ADDR(4) )
		U_DPRAM
		(
			.wrclk		(wrclk		 	),
			.rdclk		(rdclk			),
			.rd_rst_n   (rd_rst_n		),
			.wr_en 		(dpram_wr_en	),
			.rd_en 		(dpram_rd_en	),
			.wr_data 	(dpram_wr_data	),
			.rd_data 	(dpram_rd_data	),
			.wr_addr 	(dpram_wr_addr	),
			.rd_addr 	(dpram_rd_addr	)
		);
 
 
	// 产生DPRAM读写控制信号
	assign dpram_wr_en   = ( wr_en == 1'b1 && wr_full == 1'b0 )? 1'b1 : 1'b0;
	assign dpram_wr_data = wr_data;
	assign dpram_wr_addr = wr_bin[PTR-1:0];
 
	assign dpram_rd_en   = ( rd_en == 1'b1 && rd_empty == 1'b0 )? 1'b1 : 1'b0;
	assign rd_data = dpram_rd_data;
	assign dpram_rd_addr = rd_bin[PTR-1:0];
 
 

————————————————
版权声明：本文为CSDN博主「锤王马加爵」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_40807206/article/details/109555162


module Async_FIFO
# (
    parameter   DATA_WIDTH = 4,
    parameter   DATA_DEPTH = 8,
    parameter   PTR_WIDTH  = 3
)

(
    input                           w_clk, r_clk, w_rst_n, r_rst_n,
    input                           w_en, r_en,
    input       [DATA_WIDTH-1:0]    w_data,
    output  reg [DATA_WIDTH-1:0]    r_data,
    output  reg                     full, empty
);

    reg     [DATA_WIDTH-1:0]    mem_array   [0:DATA_DEPTH-1];
    reg     [PTR_WIDTH   :0]    w_ptr, r_ptr;
 //   reg     [PTR_WIDTH-1 :0]    elem_cnt;
    reg     [PTR_WIDTH   :0]    i;
    reg     [PTR_WIDTH   :0]    w_ptr_gray_d1, w_ptr_gray_d2, r_ptr_gray_d1, r_ptr_gray_d2;
    wire    [PTR_WIDTH   :0]    w_ptr_gray, r_ptr_gray;

/*-------------------------------------------\
 --------write pointer & bin -> gray---------
\-------------------------------------------*/

    always@(posedge w_clk or negedge w_rst_n)
    begin
        if(!w_rst_n)
            w_ptr <= 4'b0;
        else if(w_en && !full)
            w_ptr <= w_ptr + 4'b1;
    end

    assign w_ptr_gray = w_ptr ^ (w_ptr >> 1);

/*-------------------------------------------\
 ---------read pointer & bin -> gray---------
\-------------------------------------------*/

    always@(posedge r_clk or negedge r_rst_n)
    begin
        if(!r_rst_n)
            r_ptr <= 4'b0;
        else if(r_en && !empty)
            r_ptr <= r_ptr + 4'b1;
    end

    assign r_ptr_gray = r_ptr ^ (r_ptr >> 1);

/*-------------------------------------------\
 -----------------gray sync------------------
\-------------------------------------------*/

    always@(posedge r_clk or negedge w_rst_n)
    begin
        if(!w_rst_n)
        begin
            w_ptr_gray_d1 <= 4'b0;
            w_ptr_gray_d2 <= 4'b0;
        end
        else
        begin
            w_ptr_gray_d1 <= w_ptr_gray;
            w_ptr_gray_d2 <= w_ptr_gray_d1;
        end
    end

    always@(posedge w_clk or negedge r_rst_n)
    begin
        if(!r_rst_n)
        begin
            r_ptr_gray_d1 <= 4'b0;
            r_ptr_gray_d2 <= 4'b0;
        end
        else
        begin
            r_ptr_gray_d1 <= r_ptr_gray;
            r_ptr_gray_d2 <= r_ptr_gray_d1;
        end
    end

/*-------------------------------------------\
 -----------------full & empty---------------
\-------------------------------------------*/

    always@(*)
    begin
        if(!w_rst_n)
            full = 1'b0;
        else if(w_ptr_gray == {~r_ptr_gray_d2[PTR_WIDTH:PTR_WIDTH-1], r_ptr_gray_d2[PTR_WIDTH-2:0]})
            full = 1'b1;
        else
            full = 1'b0;
    end

    always@(*)
    begin
        if(!r_rst_n)
            empty = 1'b0;
        else if(r_ptr_gray == w_ptr_gray_d2)
            empty = 1'b1;
        else
            empty = 1'b0;
    end

/*-------------------------------------------\
 -------------------datapath-----------------
\-------------------------------------------*/

    always@(posedge w_clk or negedge w_rst_n)
    begin
        if(!w_rst_n)
        begin
            for(i = 0; i < DATA_DEPTH; i = i + 1)
            begin
                mem_array[i] <= 4'b0;
            end
        end
        else if(w_en && !full)
            mem_array[w_ptr[PTR_WIDTH-1:0]] <= w_data;
    end

    always@(posedge r_clk or negedge r_rst_n)
    begin
        if(!r_rst_n)
            r_data <= 4'b0;
        else if(r_en && !empty)
            r_data <= mem_array[r_ptr[PTR_WIDTH-1:0]];
    end
    
endmodule